/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.docufide.application;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.stream.Stream;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author marina.vasilenko
 */
public class MainWindow extends javax.swing.JFrame {
    
    private final ProjectProperties PROJECT_PROPERTIES = new ProjectProperties();
    private static final String DEFAULT_AWARD_NAME = "award.xsl";
    private static final String DEFAULT_CONVERT_FILE_NAME = "convert.bat";
    private static final String DEFAULT_OPEN_PDF_FILE_NAME = "open-result.bat";
    private static final String DEFAULT_STYLESHEET_EXTENTION = ".xsl";

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        jAwardNameText.requestFocus();
        jAwardNameText.selectAll();
        PROJECT_PROPERTIES.loadProperties();
        jXmlFileChooser.setCurrentDirectory(new File(PROJECT_PROPERTIES.getWorkPath()));
        jXslFileChooser.setCurrentDirectory(new File(PROJECT_PROPERTIES.getWorkPath()));
        jPdfFileChooser.setCurrentDirectory(new File(PROJECT_PROPERTIES.getWorkPath()));
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPreferencesWindow = new javax.swing.JDialog();
        jPreferencesOK = new javax.swing.JButton();
        jPreferencesApply = new javax.swing.JButton();
        jPreferencesCancel = new javax.swing.JButton();
        jProjectPathLabel = new javax.swing.JLabel();
        jProjectPathText = new javax.swing.JTextField();
        jFopPathLabel = new javax.swing.JLabel();
        jFopPathText = new javax.swing.JTextField();
        jWorkDirectoryLabel = new javax.swing.JLabel();
        jWorkPathText = new javax.swing.JTextField();
        jNewDialog = new javax.swing.JDialog();
        jNewCancelButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jInputXMLText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jErrorDialog = new javax.swing.JDialog();
        jErrorDialogOKButton = new javax.swing.JButton();
        jErrorLabel = new javax.swing.JLabel();
        jXslFileChooser = new javax.swing.JFileChooser();
        jXmlFileChooser = new javax.swing.JFileChooser();
        jOkDialog = new javax.swing.JDialog();
        jOkDialogOkButton = new javax.swing.JButton();
        jOkdialogLabel = new javax.swing.JLabel();
        jPdfFileChooser = new javax.swing.JFileChooser();
        jAwardNameText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jNewCreateButton = new javax.swing.JButton();
        jCloseButton = new javax.swing.JButton();
        jAddXslLabel = new javax.swing.JLabel();
        jAddXmlLabel = new javax.swing.JLabel();
        jXslChooseButton = new javax.swing.JButton();
        jXmlChooseButton = new javax.swing.JButton();
        jExistingXslText = new javax.swing.JTextField();
        jExistingXmlScrollPane = new javax.swing.JScrollPane();
        jExistingXmlText = new javax.swing.JTextArea();
        jPDFScrollPane = new javax.swing.JScrollPane();
        jPDFTextField = new javax.swing.JTextArea();
        jPDFButton = new javax.swing.JButton();
        jPDFLabel = new javax.swing.JLabel();
        jMainMenu = new javax.swing.JMenuBar();
        jFileMenu = new javax.swing.JMenu();
        jNewMenuItem = new javax.swing.JMenuItem();
        jSettingsMenu = new javax.swing.JMenu();
        jPreferencesMenu = new javax.swing.JMenuItem();

        jPreferencesWindow.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        jPreferencesOK.setText("OK");
        jPreferencesOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPreferencesOKActionPerformed(evt);
            }
        });

        jPreferencesApply.setText("Apply");
        jPreferencesApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPreferencesApplyActionPerformed(evt);
            }
        });

        jPreferencesCancel.setText("Cancel");
        jPreferencesCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPreferencesCancelActionPerformed(evt);
            }
        });

        jProjectPathLabel.setText("Project Path");

        jProjectPathText.setText("D:\\svn.docufide.com\\transformation-service-api-stylesheet");

        jFopPathLabel.setText("FOP Path");

        jFopPathText.setText("G:\\Work\\fop-2.2\\fop");

        jWorkDirectoryLabel.setText("Work Directory");

        jWorkPathText.setText("D:\\Temp\\inputfiles");

        javax.swing.GroupLayout jPreferencesWindowLayout = new javax.swing.GroupLayout(jPreferencesWindow.getContentPane());
        jPreferencesWindow.getContentPane().setLayout(jPreferencesWindowLayout);
        jPreferencesWindowLayout.setHorizontalGroup(
            jPreferencesWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPreferencesWindowLayout.createSequentialGroup()
                .addGroup(jPreferencesWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPreferencesWindowLayout.createSequentialGroup()
                        .addGap(231, 231, 231)
                        .addComponent(jPreferencesOK)
                        .addGap(51, 51, 51)
                        .addComponent(jPreferencesApply)
                        .addGap(49, 49, 49)
                        .addComponent(jPreferencesCancel))
                    .addGroup(jPreferencesWindowLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPreferencesWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jProjectPathLabel)
                            .addComponent(jFopPathLabel)
                            .addComponent(jWorkDirectoryLabel))
                        .addGap(21, 21, 21)
                        .addGroup(jPreferencesWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jProjectPathText, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
                            .addComponent(jFopPathText)
                            .addComponent(jWorkPathText))))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jPreferencesWindowLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPreferencesApply, jPreferencesCancel, jPreferencesOK});

        jPreferencesWindowLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jFopPathText, jProjectPathText, jWorkPathText});

        jPreferencesWindowLayout.setVerticalGroup(
            jPreferencesWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPreferencesWindowLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPreferencesWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jProjectPathLabel)
                    .addComponent(jProjectPathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(jPreferencesWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFopPathLabel)
                    .addComponent(jFopPathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(jPreferencesWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jWorkDirectoryLabel)
                    .addComponent(jWorkPathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPreferencesWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPreferencesOK)
                    .addComponent(jPreferencesApply)
                    .addComponent(jPreferencesCancel))
                .addGap(24, 24, 24))
        );

        jPreferencesWindowLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPreferencesApply, jPreferencesCancel, jPreferencesOK});

        jPreferencesWindowLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jFopPathText, jProjectPathText, jWorkPathText});

        jNewDialog.setModal(true);

        jNewCancelButton.setText("Cancel");
        jNewCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewCancelButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("XML Input (Optional)");

        jLabel5.setText("Target PDF (Optional)");

        javax.swing.GroupLayout jNewDialogLayout = new javax.swing.GroupLayout(jNewDialog.getContentPane());
        jNewDialog.getContentPane().setLayout(jNewDialogLayout);
        jNewDialogLayout.setHorizontalGroup(
            jNewDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jNewDialogLayout.createSequentialGroup()
                .addGroup(jNewDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jNewDialogLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jNewDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jNewDialogLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(24, 24, 24)
                                .addComponent(jInputXMLText, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jNewDialogLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jNewDialogLayout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(jNewCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        jNewDialogLayout.setVerticalGroup(
            jNewDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jNewDialogLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jNewDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jInputXMLText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jNewDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                .addComponent(jNewCancelButton)
                .addGap(25, 25, 25))
        );

        jErrorDialog.setModal(true);

        jErrorDialogOKButton.setText("OK");
        jErrorDialogOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jErrorDialogOKButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jErrorDialogLayout = new javax.swing.GroupLayout(jErrorDialog.getContentPane());
        jErrorDialog.getContentPane().setLayout(jErrorDialogLayout);
        jErrorDialogLayout.setHorizontalGroup(
            jErrorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jErrorDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jErrorDialogOKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(121, 121, 121))
            .addGroup(jErrorDialogLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jErrorDialogLayout.setVerticalGroup(
            jErrorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jErrorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jErrorDialogOKButton)
                .addGap(21, 21, 21))
        );

        jXslFileChooser.setApproveButtonText("");
        jXslFileChooser.setDialogTitle("Select existing XSL file");
        jXslFileChooser.setFileFilter(new XslFileFilter());

        jXmlFileChooser.setApproveButtonToolTipText("");
        jXmlFileChooser.setDialogTitle("Select XML files");
        jXmlFileChooser.setFileFilter(new XmlFileFilter());
        jXmlFileChooser.setMultiSelectionEnabled(true);

        jOkDialog.setModal(true);

        jOkDialogOkButton.setText("OK");
        jOkDialogOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOkDialogOkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jOkDialogLayout = new javax.swing.GroupLayout(jOkDialog.getContentPane());
        jOkDialog.getContentPane().setLayout(jOkDialogLayout);
        jOkDialogLayout.setHorizontalGroup(
            jOkDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jOkDialogLayout.createSequentialGroup()
                .addGroup(jOkDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jOkDialogLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jOkDialogOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jOkDialogLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jOkdialogLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        jOkDialogLayout.setVerticalGroup(
            jOkDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jOkDialogLayout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jOkdialogLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jOkDialogOkButton)
                .addGap(19, 19, 19))
        );

        jPdfFileChooser.setDialogTitle("Select PDF files");
        jPdfFileChooser.setFileFilter(new PdfFileFilter());
        jPdfFileChooser.setMultiSelectionEnabled(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jAwardNameText.setText("award-sample-name");

        jLabel1.setText("Stylesheet Name");

        jNewCreateButton.setText("Create");
        jNewCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewCreateButtonActionPerformed(evt);
            }
        });

        jCloseButton.setText("Close");
        jCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCloseButtonActionPerformed(evt);
            }
        });

        jAddXslLabel.setText("Add existing XSL");

        jAddXmlLabel.setText("Add XML input");

        jXslChooseButton.setText("...");
        jXslChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXslChooseButtonActionPerformed(evt);
            }
        });

        jXmlChooseButton.setText("...");
        jXmlChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXmlChooseButtonActionPerformed(evt);
            }
        });

        jExistingXmlText.setColumns(20);
        jExistingXmlText.setRows(5);
        jExistingXmlScrollPane.setViewportView(jExistingXmlText);

        jPDFTextField.setColumns(20);
        jPDFTextField.setRows(5);
        jPDFScrollPane.setViewportView(jPDFTextField);

        jPDFButton.setText("jButton1");
        jPDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPDFButtonActionPerformed(evt);
            }
        });

        jPDFLabel.setText("Reference PDF");

        jFileMenu.setText("File");

        jNewMenuItem.setText("New");
        jNewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jNewMenuItem);

        jMainMenu.add(jFileMenu);

        jSettingsMenu.setText("Settings");

        jPreferencesMenu.setText("Preferences");
        jPreferencesMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPreferencesMenuActionPerformed(evt);
            }
        });
        jSettingsMenu.add(jPreferencesMenu);

        jMainMenu.add(jSettingsMenu);

        setJMenuBar(jMainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(102, 178, Short.MAX_VALUE)
                .addComponent(jNewCreateButton)
                .addGap(121, 121, 121)
                .addComponent(jCloseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(132, 132, 132))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jAddXmlLabel)
                    .addComponent(jPDFLabel)
                    .addComponent(jAddXslLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jAwardNameText)
                    .addComponent(jPDFScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jExistingXmlScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jExistingXslText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jXmlChooseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXslChooseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPDFButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jExistingXslText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jAddXslLabel)
                    .addComponent(jXslChooseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jExistingXmlScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXmlChooseButton)
                    .addComponent(jAddXmlLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPDFLabel)
                    .addComponent(jPDFButton)
                    .addComponent(jPDFScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAwardNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNewCreateButton)
                    .addComponent(jCloseButton))
                .addGap(34, 34, 34))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jExistingXmlScrollPane, jPDFScrollPane});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPreferencesMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPreferencesMenuActionPerformed
        PROJECT_PROPERTIES.loadProperties();
        jProjectPathText.setText(PROJECT_PROPERTIES.getProjectPath());
        jFopPathText.setText(PROJECT_PROPERTIES.getFopPath());
        jWorkPathText.setText(PROJECT_PROPERTIES.getWorkPath());
        jPreferencesWindow.pack();
        jPreferencesWindow.setLocationRelativeTo(null);
        jPreferencesWindow.setVisible(true);
    }//GEN-LAST:event_jPreferencesMenuActionPerformed

    private void jPreferencesApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPreferencesApplyActionPerformed
        doApplyAction();
    }//GEN-LAST:event_jPreferencesApplyActionPerformed

    private void jNewCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewCancelButtonActionPerformed
        jNewDialog.dispose();
    }//GEN-LAST:event_jNewCancelButtonActionPerformed

    private void jNewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewMenuItemActionPerformed
        jNewDialog.pack();
        jNewDialog.setLocationRelativeTo(null);
        jNewDialog.setVisible(true);
    }//GEN-LAST:event_jNewMenuItemActionPerformed

    private void doApplyAction() {
        PROJECT_PROPERTIES.setProjectPath(jProjectPathText.getText());
        PROJECT_PROPERTIES.setFopPath(jFopPathText.getText());
        PROJECT_PROPERTIES.setWorkPath(jWorkPathText.getText());
        PROJECT_PROPERTIES.saveProperties();
    }
    private void jPreferencesOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPreferencesOKActionPerformed
        doApplyAction();
        jPreferencesWindow.dispose();
    }//GEN-LAST:event_jPreferencesOKActionPerformed

    private void jPreferencesCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPreferencesCancelActionPerformed
        jPreferencesWindow.dispose();
    }//GEN-LAST:event_jPreferencesCancelActionPerformed

    private void jCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCloseButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jCloseButtonActionPerformed

    private void showError(String text) {
        System.out.println(text);
        jErrorLabel.setText(text);
        jErrorDialog.pack();
        jErrorDialog.setLocationRelativeTo(null);
        jErrorDialog.setVisible(true);
    }
    
    private void showOk(String awardName) {
        String text = "Success";
        System.out.println(text);
        jOkdialogLabel.setText(text);
        jOkDialog.pack();
        jOkDialog.setLocationRelativeTo(null);
        jOkDialog.setVisible(true);
    }
    
    private int createDirectories() {
        PROJECT_PROPERTIES.loadProperties();
        Path currentWorkPath = Paths.get(PROJECT_PROPERTIES.getWorkPath()).resolve(jAwardNameText.getText());
        Path currentResourcesPath = Paths.get(PROJECT_PROPERTIES.getResourcesPath()).resolve(jAwardNameText.getText());
        try {
            Files.createDirectories(currentWorkPath);
            Files.createDirectories(currentResourcesPath.resolve("fo"));
            Files.createDirectories(currentResourcesPath.resolve("pdf"));
            Files.createDirectories(currentResourcesPath.resolve("xml"));
            Files.createDirectories(currentResourcesPath.resolve("reference"));
            return 0;
        } catch (IOException e) {
            showError("Error while creating directories:\n" + e.getStackTrace());
            return -1;
        }
    }
    
    private int copyFiles() {
        PROJECT_PROPERTIES.loadProperties();
        String awardName = jAwardNameText.getText();
        InputStream defaultAwardStream = this.getClass().getClassLoader().getResourceAsStream("resources" + File.separator + DEFAULT_AWARD_NAME);
        InputStream convertFileStream = this.getClass().getClassLoader().getResourceAsStream("resources" + File.separator + DEFAULT_CONVERT_FILE_NAME);
        InputStream openPdfStream = this.getClass().getClassLoader().getResourceAsStream("resources" + File.separator + DEFAULT_OPEN_PDF_FILE_NAME);
        Path currentStylesheetPath = Paths.get(PROJECT_PROPERTIES.getStylesheetPath());
        Path currentWorkPath = Paths.get(PROJECT_PROPERTIES.getWorkPath()).resolve(awardName);
        Path existingXslPath = jXslFileChooser.getSelectedFile() != null ? Paths.get(jXslFileChooser.getSelectedFile().toURI()) : null;
        Path currentResourcesPath = Paths.get(PROJECT_PROPERTIES.getResourcesPath()).resolve(awardName);
        try {
            if (existingXslPath != null) {
                Files.copy(existingXslPath, currentStylesheetPath.resolve(jAwardNameText.getText() + DEFAULT_STYLESHEET_EXTENTION), StandardCopyOption.REPLACE_EXISTING);
            } else {
                Files.copy(defaultAwardStream, currentStylesheetPath.resolve(jAwardNameText.getText() + DEFAULT_STYLESHEET_EXTENTION), StandardCopyOption.REPLACE_EXISTING);
            }    
            Files.copy(convertFileStream, currentWorkPath.resolve(DEFAULT_CONVERT_FILE_NAME), StandardCopyOption.REPLACE_EXISTING);
            if (jXmlFileChooser.getSelectedFiles() != null && jXmlFileChooser.getSelectedFiles().length != 0) {
                for (File file : jXmlFileChooser.getSelectedFiles()) {
                    Files.copy(Paths.get(file.toURI()), currentResourcesPath.resolve("xml").resolve(file.getName()), StandardCopyOption.REPLACE_EXISTING);
                    Files.copy(Paths.get(file.toURI()), currentWorkPath.resolve(file.getName()), StandardCopyOption.REPLACE_EXISTING);
                }
            }
            if (jPdfFileChooser.getSelectedFiles() != null && jPdfFileChooser.getSelectedFiles().length != 0) {
                for (File file : jPdfFileChooser.getSelectedFiles()) {
                    Files.copy(Paths.get(file.toURI()), currentResourcesPath.resolve("reference").resolve(file.getName()), StandardCopyOption.REPLACE_EXISTING);
                    Files.copy(Paths.get(file.toURI()), currentWorkPath.resolve(file.getName()), StandardCopyOption.REPLACE_EXISTING);
                }
            }
            Files.copy(openPdfStream, currentWorkPath.resolve(DEFAULT_OPEN_PDF_FILE_NAME), StandardCopyOption.REPLACE_EXISTING);

        } catch (IOException e) {
            e.printStackTrace();
            showError("Error while copying files:\n" + e.getMessage());
            return -1;
        }
        return 0;
    }
    
    private int copyLaunchFiles() {
        String awardName = jAwardNameText.getText();
        Path workspaceLaunchesPath = Paths.get(PROJECT_PROPERTIES.getLaunchesPath());
        String[] launchNames = new String[] {"xml-to-fo.launch", "open-pdf.launch", "launch.launch", "fo-to-pdf.launch"};
        for (String launch : launchNames) {
            InputStream launchStream = this.getClass().getClassLoader().getResourceAsStream("resources" + File.separator + "launches" + File.separator + launch);
            try {
                Files.copy(launchStream, workspaceLaunchesPath.resolve(awardName + "-" + launch), StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException e) {
                e.printStackTrace();
                showError("Error while copying launch files:\n" + e.getMessage());
                return -1;
            }
        }
        return 0;
    }
    
    class XslFileFilter extends FileFilter {
        @Override
        public boolean accept(File file) {
            return file.isDirectory() || file.getAbsolutePath().endsWith(".xsl");
        }

        @Override
        public String getDescription() {
            return "XSL documents (*.xsl)";
        }    
    }
    
    class XmlFileFilter extends FileFilter {

        @Override
        public boolean accept(File file) {
            return file.isDirectory() || file.getAbsolutePath().endsWith(".xml");
        }

        @Override
        public String getDescription() {
            return "XML documents (.xml)";
        }
        
    }
    
    class PdfFileFilter extends FileFilter {

        @Override
        public boolean accept(File file) {
            return file.isDirectory() || file.getAbsolutePath().endsWith(".pdf");
        }

        @Override
        public String getDescription() {
            return "PDF documents (.pdf)";
        }
        
    }
    
    
    private int updateConvertFile() {
        PROJECT_PROPERTIES.loadProperties();
        final String REPLACE_TOKEN = "[FOP Path]";
        Path currentWorkPath = Paths.get(PROJECT_PROPERTIES.getWorkPath()).resolve(jAwardNameText.getText()).resolve(DEFAULT_CONVERT_FILE_NAME);
        ArrayList<String> lines = new ArrayList<>();
        try (BufferedReader reader = Files.newBufferedReader(currentWorkPath); ) {           
            String line = null;
            while ((line = reader.readLine()) != null) {
                lines.add(line.replace(REPLACE_TOKEN, PROJECT_PROPERTIES.getFopPath()));
            }
            
        } catch (IOException e) {
            showError("Error while reading from convert file:\n" + e.getMessage());
        }
        
        try (BufferedWriter writer = Files.newBufferedWriter(currentWorkPath, StandardOpenOption.TRUNCATE_EXISTING)) {
            for (String line : lines) {
                writer.write(line + String.format("%n"));
            }
            return 0;
        } catch (IOException e) {
            showError("Error while updating convert file:\n" + e.getMessage());
            return -1;
        }
    }
    
    private int updateLaunchFiles() {
        PROJECT_PROPERTIES.loadProperties();
        final String AWARD_NAME_REPLACE_TOKEN = "[AWARD_NAME]";
        final String WORK_DIR_REPLACE_TOKEN = "[WORK_DIR]";
        final String XML_FILE_REPLACE_TOKEN = "[XML_FILE]";
        String awardName = jAwardNameText.getText();
        String workDir = PROJECT_PROPERTIES.getWorkPath();
        String xmlFile = "";
        if (jXmlFileChooser.getSelectedFiles() != null && jXmlFileChooser.getSelectedFiles().length > 0 && jXmlFileChooser.getSelectedFiles()[0] != null) {
            xmlFile = jXmlFileChooser.getSelectedFiles()[0].getName();
        }
        Path workspaceLaunchesPath = Paths.get(PROJECT_PROPERTIES.getLaunchesPath());
        
        try (Stream<Path> launchStream = Files.list(workspaceLaunchesPath)) {
            for (Path currentLaunch : launchStream.toArray(Path[]::new)) {
                if (currentLaunch.getFileName().toString().startsWith(awardName)) {
                    ArrayList<String> lines = new ArrayList<>();
                    try (BufferedReader reader = Files.newBufferedReader(currentLaunch)) {           
                        String line = null;
                        while ((line = reader.readLine()) != null) {
                            lines.add(line.replace(AWARD_NAME_REPLACE_TOKEN, awardName).replace(WORK_DIR_REPLACE_TOKEN, workDir).replace(XML_FILE_REPLACE_TOKEN, xmlFile));
                        }

                    } catch (IOException e) {
                        showError("Error while reading from launch file:\n" + e.getMessage());
                        return -1;
                    }

                    try (BufferedWriter writer = Files.newBufferedWriter(currentLaunch, StandardOpenOption.TRUNCATE_EXISTING)) {
                        for (String line : lines) {
                            writer.write(line + String.format("%n"));
                        }

                    } catch (IOException e) {
                        showError("Error while updating launch file:\n" + e.getMessage());
                        return -1;
                    }
                }
            }
                
        } catch (IOException e) {
            showError("Error while accessing .launch files:\n" + e.getMessage());
            return -1;
        }
        return 0;
    }
    
    private void jNewCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewCreateButtonActionPerformed
        // TODO add your handling code here:
        int result = 0;
        result += createDirectories();
        if (result == 0) {
            result += copyFiles();
        }
        if (result == 0) {
            result += copyLaunchFiles();
        }
        if (result == 0) {
            result += updateConvertFile();
        }
        if (result == 0) {
            result += updateLaunchFiles();
        }
        if (result == 0) {
            showOk(jAwardNameText.getText());
        }
    }//GEN-LAST:event_jNewCreateButtonActionPerformed

    private void jErrorDialogOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jErrorDialogOKButtonActionPerformed
        // TODO add your handling code here:
        jErrorDialog.dispose();
    }//GEN-LAST:event_jErrorDialogOKButtonActionPerformed

    private void jXslChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXslChooseButtonActionPerformed
        int returnValue = jXslFileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = jXslFileChooser.getSelectedFile();
            jExistingXslText.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_jXslChooseButtonActionPerformed

    private void jXmlChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXmlChooseButtonActionPerformed
        final String SEPARATOR = String.format("%n");
        int returnValue = jXmlFileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File[] files = jXmlFileChooser.getSelectedFiles();
            StringBuilder text = new StringBuilder();
            for (File file : files) {
                text.append(file.getName()).append(SEPARATOR);
            }
            jExistingXmlText.setText(text.toString());
        }
    }//GEN-LAST:event_jXmlChooseButtonActionPerformed

    private void jOkDialogOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOkDialogOkButtonActionPerformed
        jOkDialog.dispose();
    }//GEN-LAST:event_jOkDialogOkButtonActionPerformed

    private void jPDFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPDFButtonActionPerformed
        final String SEPARATOR = String.format("%n");
        int returnValue = jPdfFileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File[] files = jPdfFileChooser.getSelectedFiles();
            StringBuilder text = new StringBuilder();
            for (File file : files) {
                text.append(file.getName()).append(SEPARATOR);
            }
            jPDFTextField.setText(text.toString());
        }
    }//GEN-LAST:event_jPDFButtonActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MainWindow().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jAddXmlLabel;
    private javax.swing.JLabel jAddXslLabel;
    private javax.swing.JTextField jAwardNameText;
    private javax.swing.JButton jCloseButton;
    private javax.swing.JDialog jErrorDialog;
    private javax.swing.JButton jErrorDialogOKButton;
    private javax.swing.JLabel jErrorLabel;
    private javax.swing.JScrollPane jExistingXmlScrollPane;
    private javax.swing.JTextArea jExistingXmlText;
    private javax.swing.JTextField jExistingXslText;
    private javax.swing.JMenu jFileMenu;
    private javax.swing.JLabel jFopPathLabel;
    private javax.swing.JTextField jFopPathText;
    private javax.swing.JTextField jInputXMLText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMainMenu;
    private javax.swing.JButton jNewCancelButton;
    private javax.swing.JButton jNewCreateButton;
    private javax.swing.JDialog jNewDialog;
    private javax.swing.JMenuItem jNewMenuItem;
    private javax.swing.JDialog jOkDialog;
    private javax.swing.JButton jOkDialogOkButton;
    private javax.swing.JLabel jOkdialogLabel;
    private javax.swing.JButton jPDFButton;
    private javax.swing.JLabel jPDFLabel;
    private javax.swing.JScrollPane jPDFScrollPane;
    private javax.swing.JTextArea jPDFTextField;
    private javax.swing.JFileChooser jPdfFileChooser;
    private javax.swing.JButton jPreferencesApply;
    private javax.swing.JButton jPreferencesCancel;
    private javax.swing.JMenuItem jPreferencesMenu;
    private javax.swing.JButton jPreferencesOK;
    private javax.swing.JDialog jPreferencesWindow;
    private javax.swing.JLabel jProjectPathLabel;
    private javax.swing.JTextField jProjectPathText;
    private javax.swing.JMenu jSettingsMenu;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel jWorkDirectoryLabel;
    private javax.swing.JTextField jWorkPathText;
    private javax.swing.JButton jXmlChooseButton;
    private javax.swing.JFileChooser jXmlFileChooser;
    private javax.swing.JButton jXslChooseButton;
    private javax.swing.JFileChooser jXslFileChooser;
    // End of variables declaration//GEN-END:variables
}
